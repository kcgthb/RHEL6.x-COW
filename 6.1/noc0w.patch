diff -ru linux-2.6.32-279.2.1.el6.x86_64/include/linux/mm.h linux-2.6.32-279.2.1.el6.x86_64.noc0w/include/linux/mm.h
--- linux-2.6.32-279.2.1.el6.x86_64/include/linux/mm.h	2016-10-28 11:40:31.000000000 -0700
+++ linux-2.6.32-279.2.1.el6.x86_64.noc0w/include/linux/mm.h	2016-10-28 11:59:13.000000000 -0700
@@ -1342,6 +1342,7 @@
 #define FOLL_DUMP	0x08	/* give error on hole if it would be zero */
 #define FOLL_FORCE	0x10	/* get_user_pages read/write w/o permission */
 #define FOLL_SPLIT	0x20	/* don't return transhuge pages, split them */
+#define FOLL_COW       0x4000  /* internal GUP flag */
 
 typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
 			void *data);
diff -ru linux-2.6.32-279.2.1.el6.x86_64/mm/memory.c linux-2.6.32-279.2.1.el6.x86_64.noc0w/mm/memory.c
--- linux-2.6.32-279.2.1.el6.x86_64/mm/memory.c	2012-07-05 17:22:51.000000000 -0700
+++ linux-2.6.32-279.2.1.el6.x86_64.noc0w/mm/memory.c	2016-10-28 11:57:56.000000000 -0700
@@ -1191,6 +1191,24 @@
 }
 EXPORT_SYMBOL_GPL(zap_vma_ptes);
 
+static inline bool can_follow_write_pte(pte_t pte, struct page *page,
+                                       unsigned int flags)
+{
+       if (pte_write(pte))
+               return true;
+
+       /*
+        * Make sure that we are really following CoWed page. We do not really
+        * have to care about exclusiveness of the page because we only want
+        * to ensure that once COWed page hasn't disappeared in the meantime
+        * or it hasn't been merged to a KSM page.
+        */
+       if ((flags & FOLL_FORCE) && (flags & FOLL_COW))
+               return page && PageAnon(page) && !PageKsm(page);
+
+       return false;
+}
+
 /*
  * Do a quick page-table lookup for a single page.
  */
@@ -1264,10 +1282,11 @@
 	pte = *ptep;
 	if (!pte_present(pte))
 		goto no_page;
-	if ((flags & FOLL_WRITE) && !pte_write(pte))
-		goto unlock;
-
 	page = vm_normal_page(vma, address, pte);
+        if ((flags & FOLL_WRITE) && !can_follow_write_pte(pte, page, flags)) {
+                pte_unmap_unlock(ptep, ptl);
+                return NULL;
+        }
 	if (unlikely(!page)) {
 		if ((flags & FOLL_DUMP) ||
 		    !is_zero_pfn(pte_pfn(pte)))
@@ -1288,7 +1307,6 @@
 		 */
 		mark_page_accessed(page);
 	}
-unlock:
 	pte_unmap_unlock(ptep, ptl);
 out:
 	return page;
@@ -1487,17 +1505,13 @@
 				 * The VM_FAULT_WRITE bit tells us that
 				 * do_wp_page has broken COW when necessary,
 				 * even if maybe_mkwrite decided not to set
-				 * pte_write. We can thus safely do subsequent
-				 * page lookups as if they were reads. But only
-				 * do so when looping for pte_write is futile:
-				 * in some cases userspace may also be wanting
-				 * to write to the gotten user page, which a
-				 * read fault here might prevent (a readonly
-				 * page might get reCOWed by userspace write).
+                                 * pte_write. We cannot simply drop FOLL_WRITE
+                                 * here because the COWed page might be gone by
+                                 * the time we do the subsequent page lookups.
 				 */
 				if ((ret & VM_FAULT_WRITE) &&
 				    !(vma->vm_flags & VM_WRITE))
-					foll_flags &= ~FOLL_WRITE;
+                                        foll_flags |= FOLL_COW;
 
 				cond_resched();
 			}

